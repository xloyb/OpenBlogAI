name: Node.js CI/CD with Prisma  
on:  
  push:  
    branches: [main]  

jobs:  
  build-and-deploy:  
    runs-on: ubuntu-latest  
    steps:  
      # Checkout code  
      - uses: actions/checkout@v4  
        with:  
          repository: xloyb/OpenBlogAI  
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}  

      # Cache dependencies  
      - name: Cache node_modules  
        uses: actions/cache@v3  
        with:  
          path: server/node_modules  
          key: node-modules-${{ hashFiles('server/package-lock.json') }}  

      # Set up Node.js  
      - uses: actions/setup-node@v4  
        with:  
          node-version: 20  

      # Install dependencies  
      - name: Install dependencies  
        run: npm ci  
        working-directory: server  

      # Deploy to Server  
      - name: Deploy to Server  
        uses: appleboy/ssh-action@v1.0.0  
        with:  
          host: ${{ secrets.SERVER_IP }}  
          username: ${{ secrets.USER }}  
          key: ${{ secrets.SSH_PRIVATE_KEY }}  
          script: |  
            set -e  # Fail fast [[6]]  
            # Install Node.js and PM2 if missing  
            if ! command -v node &> /dev/null; then  
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -  
              sudo apt-get install -y nodejs  
            fi  
            if ! command -v pm2 &> /dev/null; then  
              npm install pm2 -g  
            fi  

            # Clone repo if not exists  
            if [ ! -d "/var/www/OpenBlogAI" ]; then  
              git clone git@github.com:xloyb/OpenBlogAI.git /var/www/OpenBlogAI  
            fi  

            # Navigate to server directory and update code  
            cd /var/www/OpenBlogAI/server  
            git pull origin main  

            # Install dependencies and regenerate Prisma Client  
            npm install --production  
            npx prisma generate --schema=./prisma/schema.prisma --no-engine  # [[10]]  

            # Run database migrations  
            npx prisma migrate deploy  # [[1]]  

            # Test database connection with timeout [[1]][[5]]  
            echo "Testing database connection..."  
            node -e "  
              const { PrismaClient } = require('@prisma/client');  
              const prisma = new PrismaClient();  
              prisma.$connect()  
                .then(() => {  
                  console.log('✅ Database connection successful!');  
                  process.exit(0);  
                })  
                .catch((err) => {  
                  console.error('❌ Database connection failed:', err);  
                  process.exit(1);  
                });  
              setTimeout(() => {  
                console.error('❌ Connection timed out');  
                process.exit(1);  
              }, 10000);  
            " || exit 1  

            # Restart the app  
            pm2 restart app.js  